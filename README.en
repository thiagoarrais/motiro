Motiro - A project tracking tool
Copyright (C) 2006  Thiago Arrais

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

--------------------------------------------------------------------------------

Motiro is a portal for keeping track of progress on software projects. It
allows developers to stop at a single place to get the information they need
about their project's situation.

The instructions here are intended for getting you started with Motiro and
running a first test to see what you can possibly get out of it. For real-life
production use, you will probably need a different setup. Please contact us
at the English development mailing list for further help. Subscription is free
and available at http://lists.sourceforge.net/mailman/listinfo/motiro-devel-en

GET IT RUNNING
=====

To get your own Motiro portal up and running, you will need the following:

1.  MySQL 4.1 (5.x is not yet supported and previous versions weren't tested)
2.  Ruby 1.8.2 or later
3.  Rails 1.1.6 or later
4.  Subversion client (svn) if you are planning to use the Subversion reporter
5.  Darcs client (darcs) if you are planning to use the Darcs reporter
6.  Xml-Simple 1.0.9 or later (available as Ruby Gem: xml-simple)
7.  MediaCloth 0.0.2 or later (available as Ruby Gem: mediacloth)
8.  FlexMock 0.1.7 or later if you want to run the tests (highly recommended)
    (available as Ruby Gem: flexmock)
   
If you are running Motiro with an Windows platform, you'll also need:

9.  Win32-process 0.5.1 or later (available as Ruby Gem: win32-process)
10. Windows-pr 0.5.4 or later (available as Ruby Gem: windows-pr)
   
What you need to do is:

1. Download and unpack the Motiro distribution files
------

   You probably already did it to read this. Just choose anyplace inside your
   system and unpack the contents of the archive, or get the latest source from
   our Subversion repository at https://svn.sourceforge.net/svnroot/motiro But
   keep in mind that the repository is a 'live' version, updated with our latest
   revisions and may present errors at some times.

2. Setup the database
------

   2.1. TCP Connection

   Motiro tries to connect to the MySQL server using a TCP socket. You will need
   to make sure the server is up and listening for connections on port 3306
   (MySQL default port). If you're not sure, try issuing the command

   % telnet localhost 3306

   The output should look something like

   7
    4.1.18-nt
          xH?@cU]S,ï¿½!?h3d{bUf~jv5A

   You may need to setup your MySQL server to accept TCP connections, if you
   are sure the server is running and it doesn't respond to the above command.
   You may also setup your MySQL server to answer only to connections
   originated from the localhost, if you feel opening the port is a security
   issue. For more information, please see the MySQL manual.

   2.2. Database creation

   Motiro uses the empty-passworded username 'motiro' to authenticate to the
   MySQL server. It may need to access three differente databases, depending on
   the execution context. The database names are

     - motiro_development: for development and initial test purposes
     - motiro_test: for automatic testing purposes
     - motiro_production: for real-life usage

   You will need to make sure those databases are present and fully-acessible
   to the user motiro. The following script will do the trick. It is a
   command-line script using the mysql client, but you may use any tool you'd
   prefer (maybe a GUI or web-based one). Just make sure to create the
   databases with the exact names and to grant all privileges to the motiro
   user in them.

   To use the mysql client just fire it as the root user and say (lines
   starting with '%' are commands to my shell and with 'mysql>' are to the
   MySQL database, others are the system responses to them):

   ----------------------------------------------------------------------------
   % mysql -u root -p
   Enter password: ***********
   Welcome to the MySQL monitor.  Commands end with ; or \g.
   Your MySQL connection id is 13 to server version: 4.1.18-nt

   Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

   mysql> create database motiro_development;
   Query OK, 1 row affected (0.00 sec)

   mysql> create database motiro_test;
   Query OK, 1 row affected (0.00 sec)

   mysql> create database motiro_production;
   Query OK, 1 row affected (0.02 sec)

   mysql> grant all on motiro_development.* to motiro;
   Query OK, 0 rows affected (0.00 sec)

   mysql> grant all on motiro_test.* to motiro;
   Query OK, 0 rows affected (0.00 sec)

   mysql> grant all on motiro_production.* to motiro;
   Query OK, 0 rows affected (0.00 sec)

   mysql> exit
   Bye
   ----------------------------------------------------------------------------

   2.3. Schema preparation

   Last step for setting your databases is setting up their schemas correctly.
   Fortunately, Motiro comes prepackaged with migration scripts for this
   purpose. You will need to ask rake to run them.

   % rake migrate

   And that's it. Now, if you'd like, you can run the test suite to test your
   installation. This is a highly recommended practice because it verifies if
   your system is capable of running the program. Maybe, if you're feeling
   confident enough (I never am), you'd want to skip this part and jump
   directly to step 4 to run the WEBrick web server and see the whole thing
   running.

3. Run the test suite
------

   Motiro comes with a builtin test suite. This is the full test suite we use
   during development to make sure we don't slip out of the track. To run it,
   just cd to where you unpacked Motiro and say:

   ----------------------------------------------------------------------------
   % rake test:units
   (in /home/thiago/devel/motiro)
   Loaded suite /usr/lib/ruby/gems/1.8/gems/rake-0.7.0/lib/rake/rake_test_loader
   Started
   ........
   Finished in 0.088411 seconds.

   8 tests, 26 assertions, 0 failures, 0 errors
   
   % rake test:functionals
   (in /home/thiago/devel/motiro)
   Loaded suite /usr/lib/ruby/gems/1.8/gems/rake-0.7.0/lib/rake/rake_test_loader
   Started
   .
   Finished in 0.056199 seconds.

   1 tests, 1 assertions, 0 failures, 0 errors
   ----------------------------------------------------------------------------

   You are likely to get much more dots outputed as well as messages than that,
   if you are running a recent version. Don't get lost: you only need to check
   the summary on the last line. If any test happens to fail, an error message
   will be printed and the last line will report it.
   
   If there is any error when you run these tests, please contact us on the
   development list, tell us which kind of system you are trying to run Motiro
   on and from where did you get it. Do not forget to append your bug report
   too.

4. Start the job scheduler
------

   Motiro uses a separate program responsable for automatically fetching the
   news. This program is run as a Rails Cron job. Rails Cron is a job
   scheduler similar to the `cron' program, much common in Unix systems,
   specially written for use with Rails. 
   
   To start the scheduler, you can use the 'cron_start' rake task. To stop it,
   try 'cron_stop'.

   % rake cron_start
   % rake cron_stop
   
   On Windows systems, the job scheduler can be started with the command line

   % ruby script\runner 'RailsCron.start'
   
   and stopped by pressing Ctrl-C.
   
5. Boot the server
------

   To run Motiro within a WEBrick server (a pure Ruby server), you'll just
   need to run another Ruby script. You may also try to run Motiro on a variety
   of servers, like Apache and lighttpd. But, for the sake of brevity, those
   won't be covered here.

   To run the script that boots the WEBrick server, just cd to where you
   unpacked Motiro and say:

   ----------------------------------------------------------------------------
   % ruby script/server
   => Booting WEBrick...
   => Rails application started on http://0.0.0.0:3000
   => Ctrl-C to shutdown server; call with --help for options
   [2006-03-06 14:23:32] INFO  WEBrick 1.3.1
   [2006-03-06 14:23:32] INFO  ruby 1.8.4 (2005-12-24) [i386-mswin32]
   [2006-03-06 14:23:32] INFO  WEBrick::HTTPServer#start: pid=2096 port=3000
   ----------------------------------------------------------------------------

   In order to finally see Motiro in action, point your favorite browser to
   http://localhost:3000 and you're done.

6. Configure to your project
------

   Motiro comes pre-configured to its own development needs because we actually
   use it to keep track of our progress. This may be satisfactory, if you are
   interested in watching us work. But most people want to keep track of their
   own project, their own team.
   
   To customize Motiro to your needs, you will need to edit the configuration
   file 'config/motiro.yml'. For example, suppose you are trying to keep on eye
   on the development of the Ruby on Rails framework. You can make Motiro look
   at their subversion repository by changing the 'repo' line to:

   repo: http://dev.rubyonrails.org/svn/rails

   For further information about customizing your Motiro, please contact us.

FURTHER INFO AND TROUBLESHOOTING
====

If you experience any problems with Motiro, if you have any compliments or if
you just want to discuss it, please go to

http://sourceforge.net/mail/?group_id=173790

and choose the mail list most suited to your needs.